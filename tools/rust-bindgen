#!/bin/bash

set -e

TARGET_NAME="libwallet_core_rs.a"
BUILD_FOLDER=../rust/target
CRATE="wallet-core-rs"
HEADER_NAME="WalletCoreRSBindgen.h"

for i in "$@"; do
    case $i in
    --out-dir=*)
        WALLET_OUT_DIR="${i#*=}"
        shift
        ;;
    --arch-abi=*)
        ARCH_ABI="${i#*=}"
        shift
        ;;
    --target-os=*)
        TARGET_OS="${i#*=}"
        shift
        ;;
    -f | --force)
        FORCE=YES
        shift
        ;;
    esac
done

if [ -z $WALLET_OUT_DIR ]; then
    echo "No custom output dir informed. Defaulting to \"build/local\""
    WALLET_OUT_DIR="build/local"
    TARGET_XCFRAMEWORK_NAME=swift/WalletCoreRs.xcframework
fi

TARGET_XCFRAMEWORK_NAME=${WALLET_OUT_DIR}/swift/WalletCoreRs.xcframework
mkdir -p ${WALLET_OUT_DIR}/lib

create_xc_framework() {
    rm -rf $TARGET_XCFRAMEWORK_NAME
    xcodebuild -create-xcframework -library $BUILD_FOLDER/$TARGET_NAME -library $BUILD_FOLDER/darwin_universal/$TARGET_NAME -library $BUILD_FOLDER/aarch64-apple-ios/release/$TARGET_NAME -output $TARGET_XCFRAMEWORK_NAME
    mkdir -p $TARGET_XCFRAMEWORK_NAME/ios-arm64_x86_64-maccatalyst
    cp $BUILD_FOLDER/catalyst/$TARGET_NAME $TARGET_XCFRAMEWORK_NAME/ios-arm64_x86_64-maccatalyst
}
cd rust

declare -a TARGET_TABLE
declare -a ARCH_TABLE

TARGET_TABLE[0]="aarch64-linux-android"
TARGET_TABLE[1]="armv7-linux-androideabi"
TARGET_TABLE[2]="x86_64-linux-android"
TARGET_TABLE[3]="i686-linux-android"

ARCH_TABLE[0]="android-arm64-v8a"
ARCH_TABLE[1]="android-armeabi-v7a"
ARCH_TABLE[2]="android-x86_64"
ARCH_TABLE[3]="android-x86"

if [[ "$TARGET_OS" == "android" ]]; then
    # TODO - Check a way to do this to all targets
    for KEY in "${!ARCH_TABLE[@]}"; do
        if [ -z $ARCH_ABI ] || [ "${ARCH_TABLE[$KEY]}" == "$TARGET_OS-$ARCH_ABI" ]; then
            if [ ! -z $FORCE ] || [ ! -f $BUILD_FOLDER/${TARGET_TABLE[$KEY]}/release/$TARGET_NAME ]; then
                echo "Generating build for ${TARGET_TABLE[$KEY]}"
                cargo build --target ${TARGET_TABLE[$KEY]} --release
            fi
            if [ -e ${BUILD_FOLDER}/${TARGET_TABLE[$KEY]}/release/${TARGET_NAME} ]; then
                cp ${BUILD_FOLDER}/${TARGET_TABLE[$KEY]}/release/${TARGET_NAME} ${WALLET_OUT_DIR}/lib
            fi
        fi
    done
elif [[ "$TARGET_OS" == "ios" ]]; then
    if [ $(uname) == "Darwin" ]; then
        if [ ! -z $FORCE ] || [ ! -f $BUILD_FOLDER/$TARGET_NAME ]; then
            echo "Generating iOS targets"
            cargo +nightly build -Z build-std=std,panic_abort --target aarch64-apple-ios --target aarch64-apple-ios-sim --target x86_64-apple-ios --target aarch64-apple-darwin --target x86_64-apple-darwin --target aarch64-apple-ios-macabi --target x86_64-apple-ios-macabi --release --lib &
            wait
            lipo $BUILD_FOLDER/x86_64-apple-ios/release/$TARGET_NAME $BUILD_FOLDER/aarch64-apple-ios-sim/release/$TARGET_NAME -create -output $BUILD_FOLDER/$TARGET_NAME
            mkdir -p $BUILD_FOLDER/darwin_universal
            lipo $BUILD_FOLDER/x86_64-apple-darwin/release/$TARGET_NAME $BUILD_FOLDER/aarch64-apple-darwin/release/$TARGET_NAME -create -output $BUILD_FOLDER/darwin_universal/$TARGET_NAME
            mkdir -p $BUILD_FOLDER/catalyst
            lipo $BUILD_FOLDER/aarch64-apple-ios-macabi/release/$TARGET_NAME $BUILD_FOLDER/x86_64-apple-ios-macabi/release/$TARGET_NAME -create -output $BUILD_FOLDER/catalyst/$TARGET_NAME

            create_xc_framework
            mkdir -p ${WALLET_OUT_DIR}/lib/darwin_universal
            mkdir -p ${WALLET_OUT_DIR}/lib/catalyst
            mkdir -p ${WALLET_OUT_DIR}/lib/x86_64-arm64sim

            cp ${BUILD_FOLDER}/${TARGET_NAME} ${WALLET_OUT_DIR}/lib/x86_64-arm64sim
            cp ${BUILD_FOLDER}/darwin_universal/${TARGET_NAME} ${WALLET_OUT_DIR}/lib/darwin_universal
            cp ${BUILD_FOLDER}/catalyst/${TARGET_NAME} ${WALLET_OUT_DIR}/lib/catalyst
            cp ${TARGET_XCFRAMEWORK_NAME}/ios-arm64/${TARGET_NAME} ${WALLET_OUT_DIR}/lib

            
        fi
    else
        echo "Error, Trying to build iOS on a Linux maybe?"
        exit 1
    fi
elif [[ "$TARGET_OS" == "darwin" ]]; then
    if [ ! -z $FORCE ] || [ ! -f $BUILD_FOLDER/x86_64-apple-darwin/release/$TARGET_NAME ]; then
        echo "Generating Native targets"
        cargo build --target x86_64-apple-darwin --release
        cargo build --target wasm32-unknown-emscripten --release --verbose
    fi
    if [ -e ${BUILD_FOLDER}/x86_64-apple-darwin/release/${TARGET_NAME} ]; then
        mkdir -p ${WALLET_OUT_DIR}/lib/wasm32-unknown-emscripten

        cp ${BUILD_FOLDER}/x86_64-apple-darwin/release/${TARGET_NAME} ${WALLET_OUT_DIR}/lib/
        cp ${BUILD_FOLDER}/wasm32-unknown-emscripten/release/${TARGET_NAME} ${WALLET_OUT_DIR}/lib/wasm32-unknown-emscripten
    fi
else
    # TODO - This was called if not "android" before, so it was called when ios and whatnot?
    if [ ! -z $FORCE ] || [ ! -f $BUILD_FOLDER/release/$TARGET_NAME ]; then
        echo "Generating Native targets"
        cargo build --release
        cargo build --target wasm32-unknown-emscripten --release --verbose
    fi
    if [ -e ${BUILD_FOLDER}/release/${TARGET_NAME} ]; then
        mkdir -p ${WALLET_OUT_DIR}/lib/wasm32-unknown-emscripten

        cp ${BUILD_FOLDER}/release/${TARGET_NAME} ${WALLET_OUT_DIR}/lib/
        cp ${BUILD_FOLDER}/wasm32-unknown-emscripten/release/${TARGET_NAME} ${WALLET_OUT_DIR}/lib/wasm32-unknown-emscripten
    fi
fi

if [ ! -z $FORCE ] || [ ! -f ../src/rust/bindgen/$HEADER_NAME ]; then
    cbindgen --crate $CRATE --output ../src/rust/bindgen/$HEADER_NAME
fi
cd -

if [[ $(uname) == "Darwin" ]] && [[ "$TARGET_OS" == "ios" ]]; then
    if [ ! -d $TARGET_XCFRAMEWORK_NAME ]; then
        mkdir -p $TARGET_XCFRAMEWORK_NAME
    fi
    if [ ! -z $FORCE ] || [ ! -f $TARGET_XCFRAMEWORK_NAME/Info.plist ]; then
        cd rust
        cat >$TARGET_XCFRAMEWORK_NAME/Info.plist <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AvailableLibraries</key>
	<array>
		<dict>
			<key>LibraryIdentifier</key>
			<string>macos-arm64_x86_64</string>
			<key>LibraryPath</key>
			<string>libwallet_core_rs.a</string>
			<key>SupportedArchitectures</key>
			<array>
				<string>arm64</string>
				<string>x86_64</string>
			</array>
			<key>SupportedPlatform</key>
			<string>macos</string>
		</dict>
		<dict>
        			<key>LibraryIdentifier</key>
        			<string>ios-arm64_x86_64-maccatalyst</string>
        			<key>LibraryPath</key>
        			<string>libwallet_core_rs.a</string>
        			<key>SupportedArchitectures</key>
        			<array>
        				<string>arm64</string>
        				<string>x86_64</string>
        			</array>
        			<key>SupportedPlatform</key>
        			<string>ios</string>
        			<key>SupportedPlatformVariant</key>
        			<string>maccatalyst</string>
        </dict>
		<dict>
			<key>LibraryIdentifier</key>
			<string>ios-arm64</string>
			<key>LibraryPath</key>
			<string>libwallet_core_rs.a</string>
			<key>SupportedArchitectures</key>
			<array>
				<string>arm64</string>
			</array>
			<key>SupportedPlatform</key>
			<string>ios</string>
		</dict>
		<dict>
			<key>LibraryIdentifier</key>
			<string>ios-arm64_x86_64-simulator</string>
			<key>LibraryPath</key>
			<string>libwallet_core_rs.a</string>
			<key>SupportedArchitectures</key>
			<array>
				<string>arm64</string>
				<string>x86_64</string>
			</array>
			<key>SupportedPlatform</key>
			<string>ios</string>
			<key>SupportedPlatformVariant</key>
			<string>simulator</string>
		</dict>
	</array>
	<key>CFBundlePackageType</key>
	<string>XFWK</string>
	<key>XCFrameworkFormatVersion</key>
	<string>1.0</string>
</dict>
</plist>
EOF
        cd -
    fi
fi
