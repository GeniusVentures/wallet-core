#!/bin/bash
#
# This script generates all protobuf files using the embedded version of
# Protobuf. It is important that the version used to generate the files is the
# same version being linked.
#
# You only need to run this if you change a .proto file or update the Protobuf
# submodule.
#

set -e

for i in "$@"
do
case $i in
  --protobuf-dir=*)
    PREFIX="${i#*=}"
    shift
    ;;
  --out-dir=*)
    WALLET_OUT_DIR="${i#*=}"
    shift
    ;;
  --plugin-dir=*)
    PLUGIN_DIR="${i#*=}"
    shift
    ;;
  --arch-abi=*)
    ARCH="${i#*=}"
    shift
    ;;
  --target-os=*)
    TARGET_OS="${i#*=}"
    shift
    ;;
  -f|--force)
    FORCE=YES
    shift
    ;;
esac
done

# This script works in both Docker and normal build environments.
# Protobuf and co. tools are taken from: $PREFIX if provided, or from $PWD/build/local if exists, or from /usr/bin
if [ -z $PREFIX ]
then
    # PREFIX not set
    ROOT="$PWD"
    PREFIX="$ROOT/build/local"
    if  [ ! -d $PREFIX ] || \
        [ ! -d $PREFIX/include ] || \
        [ ! -f $PREFIX/bin/protoc ] || \
        [ ! -f $PREFIX/bin/protoc-gen-c-typedef ]
    then
        echo $PREFIX does not exist or not complete, fallback to /usr/local
        PREFIX=/usr/local
    fi
fi


echo "PREFIX: $PREFIX"
echo "ARCH: $ARCH"
echo "TARGET_OS: $TARGET_OS"
echo "WALLET_OUT_DIR: $WALLET_OUT_DIR"
echo "PLUGIN_DIR: $PLUGIN_DIR"
echo "FORCE: $FORCE"
export PATH="$PREFIX/bin":$PATH
# library paths, for protobuf plugins
export LD_LIBRARY_PATH="$PREFIX/lib":$LD_LIBRARY_PATH
export DYLD_LIBRARY_PATH="$PREFIX/lib":$LD_LIBRARY_PATH
# protoc executable (protobuf compiler)
PROTOC="$PREFIX/bin/protoc"
echo "PROTOC: $PROTOC"
which $PROTOC
$PROTOC --version

if [ ! -z $FORCE ] || [ ! -f "swift/Sources/Generated/WalletCore.h" ]; then
    # Clean
    echo "Generating coins and interface code."
    rm -rf swift/Sources/Generated
    rm -rf jni/java/wallet/core/jni
    rm -rf jni/android/generated
    
    mkdir -p swift/Sources/Generated/Protobuf swift/Sources/Generated/Enums
    
    # Generate coins info from registry.json
    codegen/bin/coins
    
    # Generate interface code, Swift bindings excluded.
    codegen/bin/codegen
    
    # Generate Swift bindings with codegen-v2. This is a transitionary process 
    # and will eventually deprecate the current codegen/ entirely.
    cd codegen-v2/
    cargo run -- swift
    cp -R bindings/ ../swift/Sources/Generated/
    cp src/codegen/swift/templates/WalletCore.h ../swift/Sources/Generated/
    cd ..

    # Convert doxygen comments to appropriate format
    tools/doxygen_convert_comments
fi

FORCE_RUST=""
if [ ! -z $FORCE ]; then
    FORCE_RUST="-f"
fi
# Generate rust bindgen
tools/rust-bindgen --target-os=$TARGET_OS --arch-abi=$ARCH --out-dir=$WALLET_OUT_DIR $FORCE_RUST

# Generate Java, C++ and Swift Protobuf files
if [ -x "$(command -v protoc-gen-swift)" ] && [ $# -eq 0 ]; then
    if [ ! -z $FORCE ] || [ ! -f "swift/Sources/Generated/Protobuf/Aeternity+Proto.swift" ]; then
        echo "Generating swift code"
        "$PROTOC" -I=$PREFIX/include -I=src/proto --cpp_out=src/proto --java_out=lite:jni/proto --swift_out=swift/Sources/Generated/Protobuf --swift_opt=Visibility=Public src/proto/*.proto
    fi
else
    if [ ! -z $FORCE ] || [ ! -f "jni/proto/wallet/core/jni/proto/Aeternity.java" ]; then
        echo "Generating java code"
        "$PROTOC" -I=$PREFIX/include -I=src/proto --cpp_out=src/proto --java_out=lite:jni/proto src/proto/*.proto
    fi
fi

if [ ! -z $FORCE ] || [ ! -f "src/Hedera/Protobuf/transaction_contents.pb.h" ]; then
    # Generate internal message protocol Protobuf files
    echo "Generating internal protobuf files"
    "$PROTOC" -I=$PREFIX/include -I=src/Tron/Protobuf --cpp_out=src/Tron/Protobuf src/Tron/Protobuf/*.proto
    "$PROTOC" -I=$PREFIX/include -I=src/Zilliqa/Protobuf --cpp_out=src/Zilliqa/Protobuf src/Zilliqa/Protobuf/*.proto
    "$PROTOC" -I=$PREFIX/include -I=src/Cosmos/Protobuf --cpp_out=src/Cosmos/Protobuf src/Cosmos/Protobuf/*.proto
    "$PROTOC" -I=$PREFIX/include -I=src/Hedera/Protobuf --cpp_out=src/Hedera/Protobuf src/Hedera/Protobuf/*.proto
    "$PROTOC" -I=$PREFIX/include -I=tests/chains/Cosmos/Protobuf --cpp_out=tests/chains/Cosmos/Protobuf tests/chains/Cosmos/Protobuf/*.proto
fi

if [ ! -z $FORCE ] || [ ! -f "include/TrustWalletCore/TWOntologyProto.h" ]; then
    if [ -z $PLUGIN_DIR ]; then
        PLUGIN_DIR="$PREFIX/bin"
    fi
    echo "Generating proto interface files"
    # Generate Proto interface file
    "$PROTOC" -I=$PREFIX/include -I=src/proto --plugin=$PLUGIN_DIR/protoc-gen-c-typedef --c-typedef_out include/TrustWalletCore src/proto/*.proto
    "$PROTOC" -I=$PREFIX/include -I=src/proto --plugin=$PLUGIN_DIR/protoc-gen-swift-typealias --swift-typealias_out swift/Sources/Generated/Protobuf src/proto/*.proto
fi

# Generate Xcode project
# TODO - Check existent project?
# if [ ! -z $FORCE ] || [ ! -f "project_file_here"]; then
if [ -x "$(command -v xcodegen)" ] && [ $# -eq 0 ]; then
    pushd swift
    xcodegen
    pod install
    popd
elif [ "$TARGET_OS" == "android" ]; then
    echo -e "\nWARNING: Android detected, skipping xcodegen generation"
else
    echo -e "\nWARNING: Skipped generating Xcode project because the xcodegen tool is not installed."
fi

#cd $ROOT
